{"version":3,"sources":["src/TableRenderers.jsx"],"names":["redColorScaleGenerator","values","min","Math","apply","max","nonRed","round","x","backgroundColor","makeRenderer","opts","TableRenderer","props","state","collapsedRows","collapsedCols","colAttrs","cols","rowAttrs","rows","tableOptions","Object","assign","rowTotals","colTotals","length","subtotalOptions","arrowCollapsed","arrowExpanded","colSubtotalDisplay","displayOnTop","enabled","hideOnExpand","rowSubtotalDisplay","pivotData","subtotals","rowEnabled","colEnabled","rowPartialOnTop","colPartialOnTop","rowKeys","getRowKeys","colKeys","getColKeys","cellCallbacks","rowTotalCallbacks","colTotalCallbacks","grandTotalCallback","clickCallback","rowKey","flatRowKey","colKey","clickHandler","heatmapMappers","tableColorScaleGenerator","rowValues","colValues","value","getAggregator","filters","colLimit","i","attr","rowLimit","e","rowOrCol","attrIdx","allKeys","keyLen","collapsed","filter","k","map","updates","forEach","setState","slice","flatColKey","attrArr","numAttrs","spans","li","Array","lv","cv","ent","depth","limit","push","attrName","pivotSettings","visibleColKeys","colAttrSpans","maxColVisible","spaceCell","needToggle","clickHandle","subArrow","collapseAttr","expandAttr","attrNameCell","attrValueCells","rowIncrSpan","colSpan","rowSpan","onClick","toggleColKey","totalCell","cells","maxRowVisible","r","needLabelToggle","rowIdx","rowAttrSpans","valueCellColors","rowTotalColors","colIncrSpan","needRowToggle","toggleRowKey","attrValuePaddingCell","rowClickHandlers","valueCells","agg","aggValue","style","format","rowCells","colTotalColors","totalLabelCell","totalValueCells","grandTotalCell","totalCells","keys","subtotalDisplay","key","some","j","cachedProps","cachedBasePivotSettings","getBasePivotSettings","visibleRowKeys","visibleKeys","calcAttrSpans","c","renderColHeaderRow","renderRowHeaderRow","renderTableRow","renderTotalsRow","colorScaleGenerator","heatmapMode","colTotalValues","a","rowTotalValues","allValues","tree","cd","colorScale","v","rowColorScales","entries","rk","colColorScales","ck","Component","defaultProps","propTypes","func","object","TSVExportRenderer","headerRow","aggregatorName","join","result","row","unshift","width","window","innerWidth","height","innerHeight","PureComponent","Table"],"mappings":"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","file":"TableRenderers.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {PivotData, flatKey} from './Utilities';\n\n/* eslint-disable react/prop-types */\n// eslint can't see inherited propTypes!\n\nfunction redColorScaleGenerator(values) {\n  const min = Math.min.apply(Math, values);\n  const max = Math.max.apply(Math, values);\n  return x => {\n    // eslint-disable-next-line no-magic-numbers\n    const nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n    return {backgroundColor: `rgb(255,${nonRed},${nonRed})`};\n  };\n}\n\nfunction makeRenderer(opts = {}) {\n  class TableRenderer extends React.Component {\n    constructor(props) {\n      super(props);\n\n      // We need state to record which entries are collapsed and which aren't.\n      // This is an object with flat-keys indicating if the corresponding rows\n      // should be collapsed.\n      this.state = {collapsedRows: {}, collapsedCols: {}};\n    }\n\n    getBasePivotSettings() {\n      // One-time extraction of pivot settings that we'll use throughout the render.\n\n      const props = this.props;\n      const colAttrs = props.cols;\n      const rowAttrs = props.rows;\n\n      const tableOptions = Object.assign(\n        {\n          rowTotals: true,\n          colTotals: true,\n        },\n        props.tableOptions\n      );\n      const rowTotals = tableOptions.rowTotals || colAttrs.length === 0;\n      const colTotals = tableOptions.colTotals || rowAttrs.length === 0;\n\n      const subtotalOptions = Object.assign(\n        {\n          arrowCollapsed: '\\u25B6',\n          arrowExpanded: '\\u25E2',\n        },\n        props.subtotalOptions\n      );\n\n      const colSubtotalDisplay = Object.assign(\n        {\n          displayOnTop: false,\n          enabled: rowTotals,\n          hideOnExpand: false,\n        },\n        subtotalOptions.colSubtotalDisplay\n      );\n\n      const rowSubtotalDisplay = Object.assign(\n        {\n          displayOnTop: true,\n          enabled: colTotals,\n          hideOnExpand: false,\n        },\n        subtotalOptions.rowSubtotalDisplay\n      );\n\n      const pivotData = new PivotData(\n        props,\n        !opts.subtotals\n          ? {}\n          : {\n              rowEnabled: rowSubtotalDisplay.enabled,\n              colEnabled: colSubtotalDisplay.enabled,\n              rowPartialOnTop: rowSubtotalDisplay.displayOnTop,\n              colPartialOnTop: colSubtotalDisplay.displayOnTop,\n            }\n      );\n      const rowKeys = pivotData.getRowKeys();\n      const colKeys = pivotData.getColKeys();\n\n      // Also pre-calculate all the callbacks for cells, etc... This is nice to have to\n      // avoid re-calculations of the call-backs on cell expansions, etc...\n      const cellCallbacks = {};\n      const rowTotalCallbacks = {};\n      const colTotalCallbacks = {};\n      let grandTotalCallback = null;\n      if (tableOptions.clickCallback) {\n        for (const rowKey in rowKeys) {\n          const flatRowKey = flatKey(rowKey);\n          if (!(flatRowKey in cellCallbacks)) {\n            cellCallbacks[flatRowKey] = {};\n          }\n          for (const colKey in colKeys) {\n            cellCallbacks[flatRowKey][flatKey(colKey)] = this.clickHandler(\n              pivotData,\n              rowKey,\n              colKey\n            );\n          }\n        }\n\n        // Add in totals as well.\n        if (rowTotals) {\n          for (const rowKey in rowKeys) {\n            rowTotalCallbacks[flatKey(rowKey)] = TableRenderer.clickHandler(\n              pivotData,\n              rowKey,\n              []\n            );\n          }\n        }\n        if (colTotals) {\n          for (const colKey in colKeys) {\n            colTotalCallbacks[flatKey(colKey)] = TableRenderer.clickHandler(\n              pivotData,\n              [],\n              colKey\n            );\n          }\n        }\n        if (rowTotals && colTotals) {\n          grandTotalCallback = TableRenderer.clickHandler(pivotData, [], []);\n        }\n      }\n\n      return Object.assign(\n        {\n          pivotData,\n          colAttrs,\n          rowAttrs,\n          colKeys,\n          rowKeys,\n          rowTotals,\n          colTotals,\n          arrowCollapsed: subtotalOptions.arrowCollapsed,\n          arrowExpanded: subtotalOptions.arrowExpanded,\n          colSubtotalDisplay,\n          rowSubtotalDisplay,\n          cellCallbacks,\n          rowTotalCallbacks,\n          colTotalCallbacks,\n          grandTotalCallback,\n        },\n        TableRenderer.heatmapMappers(\n          pivotData,\n          props.tableColorScaleGenerator,\n          colTotals,\n          rowTotals\n        )\n      );\n    }\n\n    clickHandler(pivotData, rowValues, colValues) {\n      const colAttrs = this.props.cols;\n      const rowAttrs = this.props.rows;\n      const value = pivotData.getAggregator(rowValues, colValues).value();\n      const filters = {};\n      const colLimit = Math.min(colAttrs.length, colValues.length);\n      for (let i = 0; i < colLimit; i++) {\n        const attr = colAttrs[i];\n        if (colValues[i] !== null) {\n          filters[attr] = colValues[i];\n        }\n      }\n      const rowLimit = Math.min(rowAttrs.length, rowValues.length);\n      for (let i = 0; i < rowLimit; i++) {\n        const attr = rowAttrs[i];\n        if (rowValues[i] !== null) {\n          filters[attr] = rowValues[i];\n        }\n      }\n      return e =>\n        this.props.tableOptions.clickCallback(e, value, filters, pivotData);\n    }\n\n    collapseAttr(rowOrCol, attrIdx, allKeys) {\n      return () => {\n        // Collapse an entire attribute.\n\n        const keyLen = attrIdx + 1;\n        const collapsed = allKeys.filter(k => k.length === keyLen).map(flatKey);\n\n        const updates = {};\n        collapsed.forEach(k => {\n          updates[k] = true;\n        });\n\n        if (rowOrCol) {\n          this.setState(state => ({\n            collapsedRows: Object.assign({}, state.collapsedRows, updates),\n          }));\n        } else {\n          this.setState(state => ({\n            collapsedCols: Object.assign({}, state.collapsedCols, updates),\n          }));\n        }\n      };\n    }\n\n    expandAttr(rowOrCol, attrIdx, allKeys) {\n      return () => {\n        // Expand an entire attribute. This implicitly implies expanding all of the\n        // parents as well. It's a bit inefficient but ah well...\n\n        const updates = {};\n        allKeys.forEach(k => {\n          for (let i = 0; i <= attrIdx; i++) {\n            updates[flatKey(k.slice(0, i + 1))] = false;\n          }\n        });\n\n        if (rowOrCol) {\n          this.setState(state => ({\n            collapsedRows: Object.assign({}, state.collapsedRows, updates),\n          }));\n        } else {\n          this.setState(state => ({\n            collapsedCols: Object.assign({}, state.collapsedCols, updates),\n          }));\n        }\n      };\n    }\n\n    toggleRowKey(flatRowKey) {\n      return () => {\n        this.setState(state => ({\n          collapsedRows: Object.assign({}, state.collapsedRows, {\n            [flatRowKey]: !state.collapsedRows[flatRowKey],\n          }),\n        }));\n      };\n    }\n\n    toggleColKey(flatColKey) {\n      return () => {\n        this.setState(state => ({\n          collapsedCols: Object.assign({}, state.collapsedCols, {\n            [flatColKey]: !state.collapsedCols[flatColKey],\n          }),\n        }));\n      };\n    }\n\n    calcAttrSpans(attrArr, numAttrs) {\n      // Given an array of attribute values (i.e. each element is another array with\n      // the value at every level), compute the spans for every attribute value at\n      // every level. The return value is a nested array of the same shape. It has\n      // -1's for repeated values and the span number otherwise.\n\n      const spans = [];\n      // Index of the last new value\n      const li = Array(numAttrs).map(() => 0);\n      let lv = Array(numAttrs).map(() => null);\n      for (let i = 0; i < attrArr.length; i++) {\n        // Keep increasing span values as long as the last keys are the same. For\n        // the rest, record spans of 1. Update the indices too.\n        const cv = attrArr[i];\n        const ent = [];\n        let depth = 0;\n        const limit = Math.min(lv.length, cv.length);\n        while (depth < limit && lv[depth] === cv[depth]) {\n          ent.push(-1);\n          spans[li[depth]][depth]++;\n          depth++;\n        }\n        while (depth < cv.length) {\n          li[depth] = i;\n          ent.push(1);\n          depth++;\n        }\n        spans.push(ent);\n        lv = cv;\n      }\n      return spans;\n    }\n\n    static heatmapMappers(\n      pivotData,\n      colorScaleGenerator,\n      colTotals,\n      rowTotals\n    ) {\n      let valueCellColors = () => {};\n      let rowTotalColors = () => {};\n      let colTotalColors = () => {};\n      if (opts.heatmapMode) {\n        if (colTotals) {\n          const colTotalValues = Object.values(pivotData.colTotals).map(a =>\n            a.value()\n          );\n          colTotalColors = colorScaleGenerator(colTotalValues);\n        }\n        if (rowTotals) {\n          const rowTotalValues = Object.values(pivotData.rowTotals).map(a =>\n            a.value()\n          );\n          rowTotalColors = colorScaleGenerator(rowTotalValues);\n        }\n        if (opts.heatmapMode === 'full') {\n          const allValues = [];\n          Object.values(pivotData.tree).map(cd =>\n            Object.values(cd).map(a => allValues.push(a.value()))\n          );\n          const colorScale = colorScaleGenerator(allValues);\n          valueCellColors = (r, c, v) => colorScale(v);\n        } else if (opts.heatmapMode === 'row') {\n          const rowColorScales = {};\n          Object.entries(pivotData.tree).map(([rk, cd]) => {\n            const rowValues = Object.values(cd).map(a => a.value());\n            rowColorScales[rk] = colorScaleGenerator(rowValues);\n          });\n          valueCellColors = (r, c, v) => rowColorScales[flatKey(r)](v);\n        } else if (opts.heatmapMode === 'col') {\n          const colColorScales = {};\n          const colValues = {};\n          Object.values(pivotData.tree).map(cd =>\n            Object.entries(cd).map(([ck, a]) => {\n              if (!(ck in colValues)) {\n                colValues[ck] = [];\n              }\n              colValues[ck].push(a.value());\n            })\n          );\n          for (const k in colValues) {\n            colColorScales[k] = colorScaleGenerator(colValues[k]);\n          }\n          valueCellColors = (r, c, v) => colColorScales[flatKey(c)](v);\n        }\n      }\n      return {valueCellColors, rowTotalColors, colTotalColors};\n    }\n\n    renderColHeaderRow(attrName, attrIdx, pivotSettings) {\n      // Render a single row in the column header at the top of the pivot table.\n\n      const {\n        rowAttrs,\n        colAttrs,\n        colKeys,\n        visibleColKeys,\n        colAttrSpans,\n        rowTotals,\n        arrowExpanded,\n        arrowCollapsed,\n        colSubtotalDisplay,\n        maxColVisible,\n      } = pivotSettings;\n\n      const spaceCell =\n        attrIdx === 0 && rowAttrs.length !== 0 ? (\n          <th\n            key=\"padding\"\n            colSpan={rowAttrs.length}\n            rowSpan={colAttrs.length}\n          />\n        ) : null;\n\n      const needToggle =\n        opts.subtotals &&\n        colSubtotalDisplay.enabled &&\n        attrIdx !== colAttrs.length - 1;\n      let clickHandle = null;\n      let subArrow = null;\n      if (needToggle) {\n        clickHandle =\n          attrIdx + 1 < maxColVisible\n            ? this.collapseAttr(false, attrIdx, colKeys)\n            : this.expandAttr(false, attrIdx, colKeys);\n        subArrow =\n          (attrIdx + 1 < maxColVisible ? arrowExpanded : arrowCollapsed) + ' ';\n      }\n      const attrNameCell = (\n        <th key=\"label\" className=\"pvtAxisLabel\" onClick={clickHandle}>\n          {subArrow}\n          {attrName}\n        </th>\n      );\n\n      const attrValueCells = [];\n      const rowIncrSpan = rowAttrs.length !== 0 ? 1 : 0;\n      // Iterate through columns. Jump over duplicate values.\n      let i = 0;\n      while (i < visibleColKeys.length) {\n        const colKey = visibleColKeys[i];\n        const colSpan = attrIdx < colKey.length ? colAttrSpans[i][attrIdx] : 1;\n        if (attrIdx < colKey.length) {\n          const rowSpan =\n            1 + (attrIdx === colAttrs.length - 1 ? rowIncrSpan : 0);\n          const flatColKey = flatKey(colKey.slice(0, attrIdx + 1));\n          const onClick = needToggle ? this.toggleColKey(flatColKey) : null;\n          attrValueCells.push(\n            <th\n              className=\"pvtColLabel\"\n              key={'colKey-' + flatColKey}\n              colSpan={colSpan}\n              rowSpan={rowSpan}\n              onClick={onClick}\n            >\n              {needToggle\n                ? (this.state.collapsedCols[flatColKey]\n                    ? arrowCollapsed\n                    : arrowExpanded) + ' '\n                : null}\n              {colKey[attrIdx]}\n            </th>\n          );\n        } else if (attrIdx === colKey.length) {\n          const rowSpan = colAttrs.length - colKey.length + rowIncrSpan;\n          attrValueCells.push(\n            <th\n              className=\"pvtColLabel\"\n              key={'colKeyBuffer-' + flatKey(colKey)}\n              colSpan={colSpan}\n              rowSpan={rowSpan}\n            />\n          );\n        }\n        // The next colSpan columns will have the same value anyway...\n        i = i + colSpan;\n      }\n\n      const totalCell =\n        attrIdx === 0 && rowTotals ? (\n          <th\n            key=\"total\"\n            className=\"pvtTotalLabel\"\n            rowSpan={colAttrs.length + Math.min(rowAttrs.length, 1)}\n          >\n            Totals\n          </th>\n        ) : null;\n\n      const cells = [spaceCell, attrNameCell, ...attrValueCells, totalCell];\n      return <tr key={`colAttr-${attrIdx}`}>{cells}</tr>;\n    }\n\n    renderRowHeaderRow(pivotSettings) {\n      // Render just the attribute names of the rows (the actual attribute values\n      // will show up in the individual rows).\n\n      const {\n        rowAttrs,\n        colAttrs,\n        rowKeys,\n        arrowCollapsed,\n        arrowExpanded,\n        rowSubtotalDisplay,\n        maxRowVisible,\n      } = pivotSettings;\n      return (\n        <tr key=\"rowHdr\">\n          {rowAttrs.map((r, i) => {\n            const needLabelToggle =\n              opts.subtotals &&\n              rowSubtotalDisplay.enabled &&\n              i !== rowAttrs.length - 1;\n            let clickHandle = null;\n            let subArrow = null;\n            if (needLabelToggle) {\n              clickHandle =\n                i + 1 < maxRowVisible\n                  ? this.collapseAttr(true, i, rowKeys)\n                  : this.expandAttr(true, i, rowKeys);\n              subArrow =\n                (i + 1 < maxRowVisible ? arrowExpanded : arrowCollapsed) + ' ';\n            }\n            return (\n              <th\n                className=\"pvtAxisLabel\"\n                key={`rowAttr-${i}`}\n                onClick={clickHandle}\n              >\n                {subArrow}\n                {r}\n              </th>\n            );\n          })}\n          <th className=\"pvtTotalLabel\" key=\"padding\">\n            {colAttrs.length === 0 ? 'Totals' : null}\n          </th>\n        </tr>\n      );\n    }\n\n    renderTableRow(rowKey, rowIdx, pivotSettings) {\n      // Render a single row in the pivot table.\n\n      const {\n        rowAttrs,\n        colAttrs,\n        rowAttrSpans,\n        visibleColKeys,\n        pivotData,\n        rowTotals,\n        valueCellColors,\n        rowTotalColors,\n        arrowExpanded,\n        arrowCollapsed,\n        cellCallbacks,\n        rowTotalCallbacks,\n      } = pivotSettings;\n\n      const flatRowKey = flatKey(rowKey);\n\n      const colIncrSpan = colAttrs.length !== 0 ? 1 : 0;\n      const attrValueCells = rowKey.map((r, i) => {\n        const rowSpan = rowAttrSpans[rowIdx][i];\n        if (rowSpan > 0) {\n          const flatRowKey = flatKey(rowKey.slice(0, i + 1));\n          const colSpan = 1 + (i === rowAttrs.length - 1 ? colIncrSpan : 0);\n          const needRowToggle = opts.subtotals && i !== rowAttrs.length - 1;\n          const onClick = needRowToggle ? this.toggleRowKey(flatRowKey) : null;\n          return (\n            <th\n              key={`rowKeyLabel-${i}`}\n              className=\"pvtRowLabel\"\n              rowSpan={rowSpan}\n              colSpan={colSpan}\n              onClick={onClick}\n            >\n              {needRowToggle\n                ? (this.state.collapsedRows[flatRowKey]\n                    ? arrowCollapsed\n                    : arrowExpanded) + ' '\n                : null}\n              {r}\n            </th>\n          );\n        }\n        return null;\n      });\n\n      const attrValuePaddingCell =\n        rowKey.length < rowAttrs.length ? (\n          <th\n            className=\"pvtRowLabel\"\n            key=\"rowKeyBuffer\"\n            colSpan={rowAttrs.length - rowKey.length + colIncrSpan}\n            rowSpan={1}\n          />\n        ) : null;\n\n      const rowClickHandlers = cellCallbacks[flatRowKey] || {};\n      const valueCells = visibleColKeys.map(colKey => {\n        const flatColKey = flatKey(colKey);\n        const agg = pivotData.getAggregator(rowKey, colKey);\n        const aggValue = agg.value();\n        const style = valueCellColors(rowKey, colKey, aggValue);\n        return (\n          <td\n            className=\"pvtVal\"\n            key={'pvtVal-' + flatColKey}\n            onClick={rowClickHandlers[flatColKey]}\n            style={style}\n          >\n            {agg.format(aggValue)}\n          </td>\n        );\n      });\n\n      let totalCell = null;\n      if (rowTotals) {\n        const agg = pivotData.getAggregator(rowKey, []);\n        const aggValue = agg.value();\n        const style = rowTotalColors(aggValue);\n        totalCell = (\n          <td\n            key=\"total\"\n            className=\"pvtTotal\"\n            onClick={rowTotalCallbacks[flatRowKey]}\n            style={style}\n          >\n            {agg.format(aggValue)}\n          </td>\n        );\n      }\n\n      const rowCells = [\n        ...attrValueCells,\n        attrValuePaddingCell,\n        ...valueCells,\n        totalCell,\n      ];\n\n      return <tr key={'keyRow-' + flatRowKey}>{rowCells}</tr>;\n    }\n\n    renderTotalsRow(pivotSettings) {\n      // Render the final totals rows that has the totals for all the columns.\n\n      const {\n        rowAttrs,\n        colAttrs,\n        visibleColKeys,\n        colTotalColors,\n        rowTotals,\n        pivotData,\n        colTotalCallbacks,\n        grandTotalCallback,\n      } = pivotSettings;\n\n      const totalLabelCell = (\n        <th\n          key=\"label\"\n          className=\"pvtTotalLabel\"\n          colSpan={rowAttrs.length + Math.min(colAttrs.length, 1)}\n        >\n          Totals\n        </th>\n      );\n\n      const totalValueCells = visibleColKeys.map(colKey => {\n        const flatColKey = flatKey(colKey);\n        const agg = pivotData.getAggregator([], colKey);\n        const aggValue = agg.value();\n        const style = colTotalColors([], colKey, aggValue);\n        return (\n          <td\n            className=\"pvtTotal\"\n            key={'total-' + flatColKey}\n            onClick={colTotalCallbacks[flatColKey]}\n            style={style}\n          >\n            {agg.format(aggValue)}\n          </td>\n        );\n      });\n\n      let grandTotalCell = null;\n      if (rowTotals) {\n        const agg = pivotData.getAggregator([], []);\n        const aggValue = agg.value();\n        grandTotalCell = (\n          <td\n            key=\"total\"\n            className=\"pvtGrandTotal\"\n            onClick={grandTotalCallback}\n          >\n            {agg.format(aggValue)}\n          </td>\n        );\n      }\n\n      const totalCells = [totalLabelCell, ...totalValueCells, grandTotalCell];\n\n      return <tr key=\"total\">{totalCells}</tr>;\n    }\n\n    visibleKeys(keys, collapsed, numAttrs, subtotalDisplay) {\n      return keys.filter(\n        key =>\n          // Is the key hidden by one of its parents?\n          !key.some((k, j) => collapsed[flatKey(key.slice(0, j))]) &&\n          // Leaf key.\n          (key.length === numAttrs ||\n            // Children hidden. Must show total.\n            flatKey(key) in collapsed ||\n            // Don't hide totals.\n            !subtotalDisplay.hideOnExpand)\n      );\n    }\n\n    render() {\n      if (this.cachedProps !== this.props) {\n        this.cachedProps = this.props;\n        this.cachedBasePivotSettings = this.getBasePivotSettings();\n      }\n      const {\n        colAttrs,\n        rowAttrs,\n        rowKeys,\n        colKeys,\n        colTotals,\n        rowSubtotalDisplay,\n        colSubtotalDisplay,\n      } = this.cachedBasePivotSettings;\n\n      // Need to account for exclusions to compute the effective row\n      // and column keys.\n      const visibleRowKeys = opts.subtotals\n        ? this.visibleKeys(\n            rowKeys,\n            this.state.collapsedRows,\n            rowAttrs.length,\n            rowSubtotalDisplay\n          )\n        : rowKeys;\n      const visibleColKeys = opts.subtotals\n        ? this.visibleKeys(\n            colKeys,\n            this.state.collapsedCols,\n            colAttrs.length,\n            colSubtotalDisplay\n          )\n        : colKeys;\n      const pivotSettings = Object.assign(\n        {\n          visibleRowKeys,\n          maxRowVisible: Math.max(...visibleRowKeys.map(k => k.length)),\n          visibleColKeys,\n          maxColVisible: Math.max(...visibleColKeys.map(k => k.length)),\n          rowAttrSpans: this.calcAttrSpans(visibleRowKeys, rowAttrs.length),\n          colAttrSpans: this.calcAttrSpans(visibleColKeys, colAttrs.length),\n        },\n        this.cachedBasePivotSettings\n      );\n\n      return (\n        <table className=\"pvtTable\">\n          <thead>\n            {colAttrs.map((c, j) =>\n              this.renderColHeaderRow(c, j, pivotSettings)\n            )}\n            {rowAttrs.length !== 0 && this.renderRowHeaderRow(pivotSettings)}\n          </thead>\n          <tbody>\n            {visibleRowKeys.map((r, i) =>\n              this.renderTableRow(r, i, pivotSettings)\n            )}\n            {colTotals && this.renderTotalsRow(pivotSettings)}\n          </tbody>\n        </table>\n      );\n    }\n  }\n\n  TableRenderer.defaultProps = PivotData.defaultProps;\n  TableRenderer.propTypes = PivotData.propTypes;\n  TableRenderer.defaultProps.tableColorScaleGenerator = redColorScaleGenerator;\n  TableRenderer.defaultProps.tableOptions = {};\n  TableRenderer.propTypes.tableColorScaleGenerator = PropTypes.func;\n  TableRenderer.propTypes.tableOptions = PropTypes.object;\n  return TableRenderer;\n}\n\nclass TSVExportRenderer extends React.PureComponent {\n  render() {\n    const pivotData = new PivotData(this.props);\n    const rowKeys = pivotData.getRowKeys();\n    const colKeys = pivotData.getColKeys();\n    if (rowKeys.length === 0) {\n      rowKeys.push([]);\n    }\n    if (colKeys.length === 0) {\n      colKeys.push([]);\n    }\n\n    const headerRow = pivotData.props.rows.map(r => r);\n    if (colKeys.length === 1 && colKeys[0].length === 0) {\n      headerRow.push(this.props.aggregatorName);\n    } else {\n      colKeys.map(c => headerRow.push(c.join('-')));\n    }\n\n    const result = rowKeys.map(r => {\n      const row = r.map(x => x);\n      colKeys.map(c => {\n        const v = pivotData.getAggregator(r, c).value();\n        row.push(v ? v : '');\n      });\n      return row;\n    });\n\n    result.unshift(headerRow);\n\n    return (\n      <textarea\n        value={result.map(r => r.join('\\t')).join('\\n')}\n        style={{width: window.innerWidth / 2, height: window.innerHeight / 2}}\n        readOnly={true}\n      />\n    );\n  }\n}\n\nTSVExportRenderer.defaultProps = PivotData.defaultProps;\nTSVExportRenderer.propTypes = PivotData.propTypes;\n\nexport default {\n  Table: makeRenderer(),\n  'Table Heatmap': makeRenderer({heatmapMode: 'full'}),\n  'Table Col Heatmap': makeRenderer({heatmapMode: 'col'}),\n  'Table Row Heatmap': makeRenderer({heatmapMode: 'row'}),\n  'Table With Subtotal': makeRenderer({subtotals: true}),\n  'Table With Subtotal Heatmap': makeRenderer({\n    heatmapMode: 'full',\n    subtotals: true,\n  }),\n  'Table With Subtotal Col Heatmap': makeRenderer({\n    heatmapMode: 'col',\n    subtotals: true,\n  }),\n  'Table With Subtotal Row Heatmap': makeRenderer({\n    heatmapMode: 'row',\n    subtotals: true,\n  }),\n  'Exportable TSV': TSVExportRenderer,\n};\n"]}